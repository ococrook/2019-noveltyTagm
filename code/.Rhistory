w1 <- w1/ (w0 + w1 + w2)
w2 <- w2/ (w0 + w1 + w2)
tempr1 <- r1
tempr2 <- r2
r1[beta != 0 ] <- r1[beta != 0 ] + kappa1[beta != 0 ] * (log(s1) - digamma(r1) + log(beta))[beta != 0 ]
s1[beta != 0 ] <- s1[beta != 0 ] + kappa1[beta != 0 ] * (s1/tempr1 - beta)[beta != 0 ]
r2[beta != 0 ] <- r2[beta != 0 ] + kappa2[beta != 0 ] * (log(s2) - digamma(r2) + log(beta))[beta != 0 ]
s2[beta != 0 ] <- s2[beta != 0 ] + kappa2[beta != 0 ] * (s2/tempr2 - beta)[beta != 0 ]
## Finished first metropolis step
## Testing let's have a quick look at beta * ThetaMat
#temp <- rdirichlet(n, beta %*% ThetaMat)
#pca <- prcomp(temp)
#plot(pca$x[,1], pca$x[,2])
# Metropolis step for W metropolis independence sampler simulating from prior.
# propW <- matrix(runif(n * K), nrow = n, ncol = K)
#  condLikepropWGivenbetaandA <- propW * (beta == 0) + (1 - propW) * rgamma(beta, shape = 2, rate = A)
#  condLikeWGivenbetaandA <- W * (beta == 0) + (1 - W) * rgamma(beta, shape = 2, rate = A)
# logMetroW <- log(condLikepropWGivenbetaandA) - log(condLikeWGivenbetaandA)
# Sample uniform random numbers
#uW <- log(runif(n * K))
# if log(u) < log(acceptance ratio) then update
#W[uW < logMetroW] <- propW[uW < logMetroW]
# Sample new A, conditionally conjugate so can sample directly
A <- matrix(rgamma(n * K, shape = 2 + 2, rate = 2 + beta), nrow = n, ncol = K)
# update hypers of residuals
totalError <- sum((X - beta %*% ThetaMat)^2)
posteriorShape <- 1 + n * K / 2
posteriorRate <- 0.5 + totalError/2
samplePrecision <- rgamma(n = 1, shape = posteriorShape, rate = posteriorRate)
sd <- sqrt(1/samplePrecision)
#sd <- 0.05
betaIter[t, , ] <- beta
sdIter[t] <- sd
}
meanBeta <- apply(betaIter,c(2,3), function(x)mean(x))
medianBeta <- apply(betaIter,c(2,3), median)
colnames(meanBeta) <- classes
colnames(medianBeta) <- classes
pheatmap(meanBeta, scale = "none", cellwidth = 40, treeheight_row = 0)
sdIter
plot(sdIter)
betaIter <- array(0, c(2000, n, K))
sdIter <- vector("numeric", 2000)
w0 <- matrix(0.6, n, K)
w1 <- matrix(0.35, n, K)
w2 <- matrix(0.05, n, K)
sd <- 0.05
for (t in 1:2000) {
if (t%%50 == 0) {
print(t)
}
lambda <- 0.01
logN <- exp(rnorm(n * K, mean = 0, sd = 1))
wik <- cbind(c(w0), c(w1) , c(w2))
indic1 <- sample(c(1, 2), size = n * K, replace = TRUE, prob  = c(lambda, 1 - lambda))
indic2 <- apply(wik, 1, function(x) sample(c(1,2,3), size = 1, replace = FALSE, prob  = x))
#C2 <- matrix(rgamma(n * K, shape = c(8,6,9,10,7,7,7.5,9,9,10.5,10.5,10.7,9.4,13.2,11.6)/4, rate = 0.5), nrow = n, ncol = K)
#C3 <- matrix(rgamma(n * K, shape = 2, rate = 1), nrow = n, ncol = K)
if (t == 1) {
r1 <- matrix(7, n, K)
r2 <- matrix(3, n, K)
s1 <- matrix(10, n, K)
s2 <- matrix(5, n, K)
}
gamma1 <- matrix(rgamma(n * K, shape = r1, rate = s1), nrow = n, ncol = K)
gamma2 <- matrix(rgamma(n * K, shape = r2, rate = s2), nrow = n, ncol = K)
propBeta <- matrix(NA, nrow = n, ncol = K)
propBeta[indic1 == 1] <- logN[indic1 == 1]
propBeta[(indic1 == 2) & (indic2 == 1)] <- 0
propBeta[(indic1 == 2) & (indic2 == 2)] <- gamma1[(indic1 == 2) & (indic2 == 2)]
propBeta[(indic1 == 2) & (indic2 == 3)] <- gamma2[(indic1 == 2) & (indic2 == 3)]
# Fix for proposing all zeros
propBeta[rowSums(propBeta) == 0, ] <- 0.1
## Metropolis step for Beta
#diracBeta <- (beta == 0) * 0.2
#diracpropBeta <- (propBeta == 0) * 0.2
#HastingBeta <- 0.75 * dgamma(beta, shape = c(8,6,9,10,7,7,7.5,9,9,10.5,10.5,10.7,9.4,13.2,11.6)/2.5, rate = 0.4) + 0.05 * dgamma(beta, shape = 2, rate = 1) + diracBeta
#HastingpropBeta <- 0.75 * dgamma(propBeta, shape = c(8,6,9,10,7,7,7.5,9,9,10.5,10.5,10.7,9.4,13.2,11.6)/2.5, rate = 0.4) + 0.05 * dgamma(propBeta, shape = 2, rate = 1) + diracpropBeta
HastingBeta <- lambda * exp(dnorm(beta, 0, 10)) + (1 - lambda) * (w1 * dgamma(beta, shape = r1, rate = s1)
+ w2 * dgamma(beta, shape = r2, rate = s2))
HastingpropBeta <- lambda * exp(dnorm(propBeta, 0, 10)) +
(1 - lambda) * (w1 * dgamma(propBeta, shape = r1, rate = s1)
+ w2 * dgamma(propBeta, shape = r2, rate = s2))
if (sum(rowSums(beta %*% ThetaMat) == 0) !=0)
print(beta)
#condLikeGivenBeta <- ddirichlet(X, alpha = beta %*% ThetaMat)
#condLikeGivenproposedBeta <- ddirichlet(X, alpha = propBeta %*% ThetaMat)
residcurrent <- X - beta %*% ThetaMat
residprop <- X - propBeta %*% ThetaMat
condLikeGivenBeta <- exp(rowSums(dnorm(residcurrent, mean = 0, sd = sd, log = TRUE)))
condLikeGivenproposedBeta <- exp(rowSums(dnorm(residprop, mean = 0, sd = sd, log = TRUE)))
condLikepropBetaGivenWandA <- exp(rowSums(log(W * (propBeta == 0) + (1 - W) * rgamma(propBeta, shape = 2, rate = A))))
condLikeBetaGivenWandA <- exp(rowSums(log(W * (beta == 0) + (1 - W) * rgamma(beta, shape = 2, rate = A))))
#condLikepropBetaGivenWandA <- W * (propBeta == 0) + (1 - W) * rgamma(propBeta, shape = 2, rate = A)
#condLikeBetaGivenWandA  <- W * (beta == 0) + (1 - W) * rgamma(beta, shape = 2, rate = A)
ratioPi <- (condLikeGivenproposedBeta * condLikepropBetaGivenWandA) / (condLikeGivenBeta * condLikeBetaGivenWandA)
eta <- matrix(NA, nrow = n, ncol = K)
eta[(beta == 0) & (propBeta == 0)] <- 1
eta[(beta != 0) & (propBeta == 0)] <- (ratioPi * (HastingBeta/(1 - lambda) * w0))[(beta != 0) & (propBeta == 0)]
eta[(beta == 0) & (propBeta != 0)] <- (ratioPi * ((1 - lambda) * w0/ HastingpropBeta))[(beta == 0) & (propBeta != 0)]
eta[(beta != 0) & (propBeta != 0)] <- (ratioPi * (HastingBeta/HastingpropBeta))[(beta != 0) & (propBeta != 0)]
#MetropolisBetaNum <- condLikeGivenproposedBeta * condLikepropBetaGivenWandA * exp(rowSums(log(HastingBeta)))
#MetropolisBetaDen <- condLikeGivenBeta * condLikeBetaGivenWandA * exp(rowSums(log(HastingpropBeta)))
#logMetroBeta <- log(MetropolisBetaNum) - log(MetropolisBetaDen)
## Sample uniform random numbers
ubeta <- log(runif(n * K))
# if logMetroBeta > 0 then update straight away
# beta[logMetroBeta > 0] <- propBeta[logMetroBeta > 0]
# if log(u) < log(acceptance ratio) then update
beta[ubeta < log(eta)] <- propBeta[ubeta < log(eta)]
## Make adaptive proposal updates
bigO_0 <- 1/w0
bigO_1 <- matrix(NA, nrow = n, ncol = K)
bigO_1[beta == 0] <- 1/w0[beta == 0]
bigO_1[beta != 0] <- rgamma(beta[beta != 0], r1[beta != 0], s1[beta != 0])
bigO_2 <- matrix(NA, nrow = n, ncol = K)
bigO_2[beta == 0] <- 1/w0[beta == 0]
bigO_2[beta != 0] <- rgamma(beta[beta != 0], r2[beta != 0], s2[beta != 0])
# Normalise
bigO_1[beta != 0] <- bigO_1[beta != 0]/(bigO_1[beta != 0] + bigO_2[beta != 0])
bigO_2[beta != 0] <- bigO_2[beta != 0]/(bigO_1[beta != 0] + bigO_2[beta != 0])
bigO_bar <- (bigO_0 + bigO_1 + bigO_2)/3
gamma_k <- 0.1/t
kappa1 <- gamma_k * w1 * bigO_1
kappa2 <- gamma_k * w2 * bigO_2
w0 <- w0 + gamma_k * (bigO_0 - bigO_bar)
w1 <- w1 + gamma_k * (bigO_1 - bigO_bar)
w2 <- w2 + gamma_k * (bigO_2 - bigO_bar)
# SA doesn't gaurentee positivity
if(sum(w0 < 0) > 0)
w0[w0 < 0] <- 0
if(sum(w1 < 0) > 0)
w1[w1 < 0] <- 0
if(sum(w2 < 0) > 0)
w2[w2 < 0] <- 0
w0 <- w0/ (w0 + w1 + w2)
w1 <- w1/ (w0 + w1 + w2)
w2 <- w2/ (w0 + w1 + w2)
tempr1 <- r1
tempr2 <- r2
r1[beta != 0 ] <- r1[beta != 0 ] + kappa1[beta != 0 ] * (log(s1) - digamma(r1) + log(beta))[beta != 0 ]
s1[beta != 0 ] <- s1[beta != 0 ] + kappa1[beta != 0 ] * (s1/tempr1 - beta)[beta != 0 ]
r2[beta != 0 ] <- r2[beta != 0 ] + kappa2[beta != 0 ] * (log(s2) - digamma(r2) + log(beta))[beta != 0 ]
s2[beta != 0 ] <- s2[beta != 0 ] + kappa2[beta != 0 ] * (s2/tempr2 - beta)[beta != 0 ]
## Finished first metropolis step
## Testing let's have a quick look at beta * ThetaMat
#temp <- rdirichlet(n, beta %*% ThetaMat)
#pca <- prcomp(temp)
#plot(pca$x[,1], pca$x[,2])
# Metropolis step for W metropolis independence sampler simulating from prior.
# propW <- matrix(runif(n * K), nrow = n, ncol = K)
#  condLikepropWGivenbetaandA <- propW * (beta == 0) + (1 - propW) * rgamma(beta, shape = 2, rate = A)
#  condLikeWGivenbetaandA <- W * (beta == 0) + (1 - W) * rgamma(beta, shape = 2, rate = A)
# logMetroW <- log(condLikepropWGivenbetaandA) - log(condLikeWGivenbetaandA)
# Sample uniform random numbers
#uW <- log(runif(n * K))
# if log(u) < log(acceptance ratio) then update
#W[uW < logMetroW] <- propW[uW < logMetroW]
# Sample new A, conditionally conjugate so can sample directly
A <- matrix(rgamma(n * K, shape = 2 + 2, rate = 2 + beta), nrow = n, ncol = K)
# update hypers of residuals
totalError <- sum((X - beta %*% ThetaMat)^2)
posteriorShape <- 1 + n * K / 2
posteriorRate <- 0.5 + totalError/2
samplePrecision <- rgamma(n = 1, shape = posteriorShape, rate = posteriorRate)
sd <- sqrt(1/samplePrecision)
#sd <- 0.05
betaIter[t, , ] <- beta
sdIter[t] <- sd
}
sd
plot(sd)
plot(sdIter)
meanBeta <- apply(betaIter,c(2,3), function(x)mean(x))
medianBeta <- apply(betaIter,c(2,3), median)
colnames(meanBeta) <- classes
colnames(medianBeta) <- classes
pheatmap(meanBeta, scale = "none", cellwidth = 40, treeheight_row = 0)
df <- medianBeta/(rowSums(medianBeta) + 1)
pheatmap(df, scale = "none", cellwidth = 40, treeheight_row = 0)
meanBeta[1,]
meanBeta[2,]
df <- medianBeta/(rowSums(medianBeta) + 1)
autoplot(prcomp(df), data = medianBeta, loadings = TRUE, loadings.colour = 'blue', x = 5, y = 6,
loadings.label = TRUE, loadings.label.size = 3)
fData(hl)$allocation <- fData(hl)$markers
rownames(meanBeta) <- rownames(X)
fData(hl)$allocation[fData(hl)$markers == "unknown"] <- classes[apply(meanBeta, 1, which.max)]
plot2D(hl, fcol = "allocation")
meanBeta[2,]
plot(meanBeta[2,])
X[2]
rownames(X)
rownames(X)[2]
plot(meanBeta[2,])
plot2D(hl, fcol = "allocation")
FeaturesOfInterest(hl, "Q8R4U7")
highlightOnPlot(hl, "Q8R4U7")
highlightOnPlot(hl, "Q8R4U7", cex = 10)
plot(meanBeta[3,])
rownames(X)[3]
classes
plot2D(hl, fcol = "allocation")
highlightOnPlot(hl, "P70261", cex = 10)
plot(meanBeta[4,])
plot(meanBeta[5,])
plot(meanBeta[6,])
plot(meanBeta[7,])
plot(meanBeta[8,])
plot(meanBeta[9,])
plot(meanBeta[10,])
rownames(X)[10]
plot(meanBeta[11,])
plot(meanBeta[12,])
plot(meanBeta[13,])
plot(meanBeta[14,])
rownames(X)[14]
plot(meanBeta[15,])
plot(meanBeta[16,])
plot(meanBeta[17,])
plot(meanBeta[18,])
plot(meanBeta[19,])
rownames(X)[19]
devtools::install_github("lgatto/pRoloc")
pRoloc::tagmMapPredict()
pRoloc::tagmMapPredict
warnings()
unlink('C:/Users/OllyC/Desktop/TAGMworkflow/TAGMworkflow_cache', recursive = TRUE)
detach(package:pRoloc)
detach("package:pRoloc")
devtools::install_github("lgatto/pRoloc", force = TRUE)
require(pRoloc)
require(pRolocdata)
data(hyperLOPITU2OS2018)
load("C:/Users/OllyC/Desktop/NoveltyTagm_local/data/endosomeMarkers.rda")
fData(hyperLOPITU2OS2018)$nt.markers <- fData(hyperLOPITU2OS2018)$markers
levels(fData(hyperLOPITU2OS2018)$nt.markers) <- factor(c(levels(fData(hyperLOPITU2OS2018)$markers), "endosome"),
levels = c("CHROMATIN","CYTOSOL","ER","GA","LYSOSOME","MITOCHONDRION","NUCLEUS",
"PEROXISOME","PM","PROTEASOME","RIBOSOME 40S","RIBOSOME 60S","endosome","unknown" ))
fData(hyperLOPITU2OS2018)[endosomeMarkers,]$nt.markers <- "endosome"  #make sure levels are in right order!!
hlU2OSTagmaddMarkers <- tagmMcmcTrain(object = hyperLOPITU2OS2018,
numIter = 5,
thin = 1,
burnin = 1,
numChains = 1,
fcol = "nt.markers")
tagmMcmcTrain()
tagmMcmcTrain
pRoloc:::tagmMcmcChain()
pRoloc:::tagmMcmcChain
hlU2OSTagmaddMarkers <- tagmMcmcTrain(object = hyperLOPITU2OS2018,
numIter = 5,
thin = 1,
burnin = 1,
numChains = 1,
fcol = "nt.markers")
debug()
hlU2OSTagmaddMarkers <- tagmMcmcTrain(object = hyperLOPITU2OS2018,
numIter = 5,
thin = 1,
burnin = 1,
numChains = 1,
fcol = "nt.markers")
hlU2OSTagmaddMarkers <- tagmMcmcTrain(object = hyperLOPITU2OS2018,
numIter = 5,
thin = 1,
burnin = 1,
numChains = 1,
fcol = "nt.markers")
debug()
fData(hyperLOPITU2OS2018)$nt.markers
table(fData(hyperLOPITU2OS2018)$nt.markers)
tabulate(fData(hyperLOPITU2OS2018)$nt.markers)
object <- hyperLOPITU2OS2018
fcol = "nt.markers"
tabulate(fData(hyperLOPITU2OS2018)$markers)
markersubset <- markerMSnSet(object, fcol = fcol)
markers <- getMarkerClasses(markersubset, fcol = fcol)
mydata <- exprs(markersubset)
X <- exprs(unknownMSnSet(object, fcol = fcol))
markers
tabulate(fData(markersubset)[, fcol])
tabulate(fData(markersubset)[, fcol])[markers]
markers
table(fData(markersubset)[, fcol])[markers]
devtools::install_github("lgatto/pRoloc", force = TRUE)
require(pRoloc)
require(pRolocdata)
data(hyperLOPITU2OS2018)
load("C:/Users/OllyC/Desktop/NoveltyTagm_local/data/endosomeMarkers.rda")
fData(hyperLOPITU2OS2018)$nt.markers <- fData(hyperLOPITU2OS2018)$markers
levels(fData(hyperLOPITU2OS2018)$nt.markers) <- factor(c(levels(fData(hyperLOPITU2OS2018)$markers), "endosome"),
levels = c("CHROMATIN","CYTOSOL","ER","GA","LYSOSOME","MITOCHONDRION","NUCLEUS",
"PEROXISOME","PM","PROTEASOME","RIBOSOME 40S","RIBOSOME 60S","endosome","unknown" ))
fData(hyperLOPITU2OS2018)[endosomeMarkers,]$nt.markers <- "endosome"  #make sure levels are in right order!!
hlU2OSTagmaddMarkers <- tagmMcmcTrain(object = hyperLOPITU2OS2018,
numIter = 5,
thin = 1,
burnin = 1,
numChains = 1,
fcol = "nt.markers")
fcol = "nt.markers"
object = hyperLOPITU2OS2018
markersubset <- markerMSnSet(object, fcol = fcol)
markers <- getMarkerClasses(markersubset, fcol = fcol)
mydata <- exprs(markersubset)
X <- exprs(unknownMSnSet(object, fcol = fcol))
markers
K
N <- nrow(mydata)
D <- ncol(mydata)
K <- length(markers)
## set empirical priors
if (is.null(nu0))
nu0 <- D + 2
if (is.null(S0))
S0 <- diag( colSums(( mydata - mean( mydata)) ^ 2) / N)/( K ^ (1/D))
if (is.null(mu0))
mu0 <- colMeans( mydata)
if (is.null(beta0))
beta0 <- rep(1, K)
nk
## create storage for posterior parameters
mk <- matrix(0, nrow = K, ncol = D)
lambdak <- matrix(0, nrow = K, ncol = 1)
nuk <- matrix(0, nrow = K, ncol = 1)
sk <- array(0, dim = c(K, D, D))
## create storage for cluster parameters
xk <- matrix(0, nrow = K, ncol = D)
table(fData(markersubset)[, fcol])[markers]
nk <- table(fData(markersubset)[, fcol])[markers]
markers
K
for (j in seq.int(K))
xk[j, ] <- colSums(mydata[fData(markersubset)[, fcol] == markers[j], ])/nk[j]
lambdak <- lambda0 + nk
xk
nk
nk * xk
fcol
markers[1]
mydata
xk
dim(xk)
nk
hlU2OSTagmaddMarkers <- tagmMcmcTrain(object = hyperLOPITU2OS2018,
numIter = 5,
thin = 1,
burnin = 1,
numChains = 1,
fcol = "markers")
fcol = "markers"
nk
## get expression marker data
markersubset <- markerMSnSet(object, fcol = fcol)
markers <- getMarkerClasses(markersubset, fcol = fcol)
mydata <- exprs(markersubset)
X <- exprs(unknownMSnSet(object, fcol = fcol))
## get data dize
N <- nrow(mydata)
D <- ncol(mydata)
K <- length(markers)
K
nk <- table(fData(markersubset)[, fcol])[markers]
nk
for (j in seq.int(K))
xk[j, ] <- colSums(mydata[fData(markersubset)[, fcol] == markers[j], ])/nk[j]
dim(xk)
fcol
nk
length(nk)
K
xk <- matrix(0, nrow = K, ncol = D)
for (j in seq.int(K))
xk[j, ] <- colSums(mydata[fData(markersubset)[, fcol] == markers[j], ])/nk[j]
dim(xk)
12 * 57
nk
nk * xk
nk <- tabulate(fData(markersubset)[, fcol])
nk * xk
nk
dim(nk)
nk <- table(fData(markersubset)[, fcol])[markers]
dim(nk)
nk <- c(table(fData(markersubset)[, fcol])[markers])
nk
nk * xk
nk <- table(fData(markersubset)[, fcol])[markers]
nk * xk
c(table(fData(markersubset)[, fcol])[markers]) * xk == tabulate(fData(markersubset)[, fcol]) * xk
devtools::install_github("lgatto/pRoloc", force = TRUE)
require(pRoloc)
devtools::install_github("lgatto/pRoloc",repo = "novelty" ,force = TRUE)
devtools::install_github("lgatto/pRoloc", ref = "novelty" ,force = TRUE)
devtools::install_github("lgatto/pRoloc", ref = "novelty" ,force = TRUE)
require(pRoloc)
load("C:/Users/OllyC/Desktop/NoveltyTagm_local/data/hirstTagmNoveltyparams.rda")
require(pRolocdata)
data(hirst2018)
newHirst <- hirst2018[, c(11:15, 26:30, 41:45)]
setStockcol(paste0(getStockcol(), 90))
source("../scripts/plot2D.R")
source('C:/Users/OllyC/Desktop/scripts/plot2D.R')
outliers <- mcmc_get_outliers(hirstTagmNoveltyparams[c(1,2,4,6)])
hirstdiag <- gelman.diag(outliers)
require(coda)
outliers <- mcmc_get_outliers(hirstTagmNoveltyparams[c(1,2,4,6)])
hirstdiag <- gelman.diag(outliers)
hirstTagmNoveltyparams_conv <- hirstTagmNoveltyparams[c(1,2,4,6)]
hirstTagmNoveltyRes <- tagmNoveltyProcess(object = newHirst, params = hirstTagmNoveltyparams_conv)
setwd("C:/Users/OllyC/Desktop/2019-noveltyTagm/code")
newHirst
debug()
debug(hirstTagmNoveltyRes <- tagmNoveltyProcess(object = newHirst, params = hirstTagmNoveltyparams_conv))
debug(tagmNoveltyProcess(object = newHirst, params = hirstTagmNoveltyparams_conv))
traceback()
unknownMSnSet(newHirst)
length(unknownMSnSet(newHirst))
nrow(unknownMSnSet(newHirst))
nrow(markerMSnSet(newHirst))
nrow(newHirst)
1298 + 748
tagmNoveltyChainProcess <- function(object,
params,
fcol = "markers") {
## Checks that params is object of class MCMCChain
stopifnot(inherits(params, "MCMCChain"))
## Make marker allocation matrix and align rownames
markersubset <- markerMSnSet(object = object, fcol)
markers <- getMarkerClasses(markersubset, fcol = fcol)
markerallocationMat <- matrix(NA, ncol = ncol(params@Component), nrow = nrow(markersubset))
rownames(markerallocationMat) <- rownames(markersubset)
K <- params@K
K_markers <- nlevels(fData(markersubset)[, fcol])
## populate marker allocation matrix
for (j in seq.int(K_markers)) {
toSubset <- rownames(markersubset)[fData(markersubset)[, fcol] == markers[j]]
markerallocationMat[toSubset, ] <- rep(j, ncol(params@Component))
}
# Form component matrix with markers
combinedComponent <- rbind(params@Component, markerallocationMat)
#Compute PSM and summarise using MCclust methods
modal.k <- which.max(tabulate(apply(params@Component, 2, function(x) length(unique(x)))))
psm <- mcclust::comp.psm(t(combinedComponent))
mp <- mcclust::maxpear(psm = psm, max.k = K)
# Match rownames
names(mp$cl) <- rownames(combinedComponent)
rownames(psm) <- colnames(psm) <- c(rownames(unknownMSnSet(object, fcol = fcol)), rownames(markersubset))
# Finding mapping from cluster to organelle because of label switching
mapping <- matrix(NA, ncol = K_markers, nrow = 1)
for (j in seq.int(K_markers)) {
toSubset <- rownames(combinedComponent
[rownames(markersubset), ])[combinedComponent[rownames(markersubset), 1] == j]
mapping[j] <- mp$cl[toSubset][1]
}
mapping <- c(mapping, seq.int(1:K)[!seq.int(1:K) %in% mapping])
# Match up clusters with organelles and phenotypes
for (j in seq.int(K)) {
mp$cl[mp$cl == mapping[j]] <- rownames(params@ComponentParam@mk)[j]
}
# Make factor
mp$cl <- factor(mp$cl)
## Make output
.out <- list(psm = psm,
mp = mp)
return(.out)
}
hirstTagmNoveltyRes <- tagmNoveltyProcess(object = newHirst, params = hirstTagmNoveltyparams_conv)
tagmNoveltyProcess <- function(object,
params,
fcol = "markers") {
## Checks that params is object of class MCMCChain
stopifnot(inherits(params, "MCMCParams"))
numChains <- length(params)
## Storage
psms <- vector("list", length = numChains)
mps <- vector("list", length = numChains)
## Marker Classes
markersubset <- markerMSnSet(object = object, fcol)
K_markers <- nlevels(fData(markersubset)[, fcol])
for (j in seq_len(numChains)){
## For each Chain compute psm and maxpear
.res <- tagmNoveltyChainProcess(object = object,
params = pRoloc:::chains(params)[[j]],
fcol = fcol)
psms[[j]] <- .res$psm
mps[[j]] <- .res$mp
}
## Pool Chains and get psm and maxpear for combined chains
pooledparams <- mcmc_pool_chains(params)
.pooledres <- tagmNoveltyChainProcess(object = object,
params = pRoloc:::chains(pooledparams)[[1]],
fcol = fcol)
psmCombined <- .pooledres$psm
mpCombined <- .pooledres$mp
pooledparams <- tagmMcmcProcess(pooledparams)
tagm.newcluster.prob <- 1 - rowSums(pooledparams@summary@tagm.joint[, 1:K_markers])
# Make output
.out <- list(psmCombined = psmCombined,
mpCombined = mpCombined,
psms = psms, mps = mps,
tagm.newcluster.prob = tagm.newcluster.prob)
return(.out)
}
hirstTagmNoveltyRes <- tagmNoveltyProcess(object = newHirst, params = hirstTagmNoveltyparams_conv)
detach(package = "pRoloc")
detach("pRoloc")
detach(package::pRoloc)
detach(package:pRoloc)
hirstTagmNoveltyRes <- tagmNoveltyProcess(object = newHirst, params = hirstTagmNoveltyparams_conv)
devtools::install_github("lgatto/pRoloc", ref = "novelty" ,force = TRUE)
